searchState.loadedDescShard("re_video", 0, "Video decoding library.\nA value in time units.\nThe number of time units per second.\nReturns information about this crate\nVideo frame decoding.\nVideo demultiplexing.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInterface for an asynchronous video decoder.\nMay use hardware acceleration if available and compatible …\nOne chunk of encoded video data; usually one frame.\nHow the video should be decoded.\nContains the error value\nOne decoded video frame.\nData for a decoded frame on native targets.\nMeta information about a decoded video frame, as reported …\nInterpret YUV as GBR.\nContains the success value\nPixel format/layout used by <code>FrameContent::data</code>.\nShould use a hardware decoder.\nShould use a software decoder even if hardware …\nYuv matrix coefficients used by <code>PixelFormat::Yuv</code>.\nPixel layout used by <code>PixelFormat::Yuv</code>.\nYuv value range used by <code>PixelFormat::Yuv</code>.\nAV1 support.\nPresentation/composition timestamp for the sample in this …\nHow long the frame is valid.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe start of a new <code>crate::demux::GroupOfPictures</code>?\nCreates a new async decoder for the given <code>video</code> data.\nThe presentation timestamp of the frame.\nResets the decoder.\nSubmits a chunk for decoding in the background.\nPresentation timestamp range in which this frame is valid.\nRuns a <code>SyncDecoder</code> in a background thread, for …\nBlocking decoder of video chunks.\nWhere the decoding happens\nCommands sent to the decoder thread.\nInstant communication to the decoder thread (circumventing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIncremented on each call to <code>AsyncDecoder::reset</code>. …\nClear and reset everything\nResets the decoder.\nSet when it is time to die\nSubmit some work and read the results.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the number of new frames.\nClear and reset everything\nConfiguration of a video.\nA Group of Pictures (GOP) always starts with an I-frame, …\nA single sample in a video.\nNot used in <code>re_video</code> itself, but useful for media type …\nDecoded video data.\nErrors that can occur when loading a video.\nSubsampling in both X and Y.\nSubsampling in X only.\nNo subsampling.\nPer color component bit depth.\nLength of sample starting at <code>Sample::byte_offset</code>.\nOffset into the video data.\nNatural height of the video.\nNatural width of the video.\nTime at which this sample appears in the frame stream, in …\nTime at which this sample appears in the decoded …\nCodec-specific configuration.\nNatural width and height of the video\nLength of the video.\nDuration of the video, in time units.\nDuration of the sample, in time units.\nDetermines the presentation timestamps of all frames …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead the sample from the video data.\nWe split video into GOPs, each beginning with a key frame, …\nNatural height of the video.\nThe codec used to encode the video.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns None if the mp4 doesn’t specify whether the …\nIs t his the start of a new <code>GroupOfPictures</code>?\nLoads a video from the given data.\nAll the tracks in the mp4; not just the video track.\nThe number of samples in the video.\nThe GOP’s <code>sample_range</code> mapped to <code>usize</code> for slicing.\nRange of samples contained in this GOP.\nSamples contain the byte offsets into <code>data</code> for each frame.\nDecode timestamp of the first sample in this GOP, in time …\nContains info about the codec, bit depth, etc.\nReturns the subsampling mode of the video.\nHow many time units are there per second.\nNatural width of the video.\nA value in time units.\nThe number of time units per second.\nConvert to a duration\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new value in <em>time units</em>.")